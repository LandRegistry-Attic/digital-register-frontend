from service.server import app
import json
import mock
import unittest
import requests
import responses

from .fake_response import FakeResponse

fake_title = FakeResponse(b'''{
"data":
{
"application_reference":
"EXAMPLE_application_reference",
"class":
"EXAMPLE_class",
"districts":
[
"EXAMPLE_district"
],
"dlr":
"EXAMPLE_dlr",
"edition_date":
"EXAMPLE_edition_date",
"entries":
[
{
"deeds":
[
{
"date":
"EXAMPLE_date",
"description":
"EXAMPLE_description",
"lease_term":
"EXAMPLE_lease_term",
"parties":
[
{
"names":
[
{
"alias_names":
[
{
"decoration":
"EXAMPLE_decoration",
"forename":
"EXAMPLE_forename",
"surname":
"EXAMPLE_surname",
"title":
"EXAMPLE_title",
"upper_override":
"EXAMPLE_upper_override"
}
],
"auto_uppercase_override":
"EXAMPLE_auto_uppercase_override",
"charity_name":
"EXAMPLE_charity_name",
"company_location":
"EXAMPLE_company_location",
"company_reg_num":
"EXAMPLE_company_reg_num",
"country_incorporation":
"EXAMPLE_country_incorporation",
"decoration":
"EXAMPLE_decoration",
"forename":
"EXAMPLE_forename",
"local_authority_area":
"EXAMPLE_local_authority_area",
"name_category":
"EXAMPLE_name_category",
"name_information":
"EXAMPLE_name_information",
"name_occupation":
"EXAMPLE_name_occupation",
"name_supplimentary":
"EXAMPLE_name_supplimentary",
"non_private_individual_name":
"EXAMPLE_non_private_individual_name",
"surname":
"EXAMPLE_surname",
"title":
"EXAMPLE_title",
"trading_name":
"EXAMPLE_trading_name",
"trust_format":
"EXAMPLE_trust_format"
}
],
"party_role_description":
"EXAMPLE_party_role_description"
}
],
"payment_detail":
"EXAMPLE_payment_detail",
"rent_detail":
"EXAMPLE_rent_detail",
"rentcharge_amount":
"EXAMPLE_rentcharge_amount",
"title_number":
"EXAMPLE_title_number"
}
],
"draft_entry_code":
"EXAMPLE_draft_entry_code",
"draft_entry_version":
"EXAMPLE_draft_entry_version",
"entry_date":
"EXAMPLE_entry_date",
"entry_id":
"EXAMPLE_entry_id",
"full_text":
"EXAMPLE_full_text",
"infills":
[
{
"address":
{
"address_string":
"EXAMPLE_address_string",
"address_type":
"EXAMPLE_address_type",
"auto_uppercase_override":
"EXAMPLE_auto_uppercase_override",
"care_of":
"EXAMPLE_care_of",
"care_of_name":
"EXAMPLE_care_of_name",
"country":
"EXAMPLE_country",
"dx_no":
"EXAMPLE_dx_no",
"email_address":
"EXAMPLE_email_address",
"exchange_name":
"EXAMPLE_exchange_name",
"house_alpha":
"EXAMPLE_house_alpha",
"house_description":
"EXAMPLE_house_description",
"house_no":
"EXAMPLE_house_no",
"leading_info":
"EXAMPLE_leading_info",
"local_name":
"EXAMPLE_local_name",
"plot_code":
"EXAMPLE_plot_code",
"plot_no":
"EXAMPLE_plot_no",
"postal_county":
"EXAMPLE_postal_county",
"postcode":
"EXAMPLE_postcode",
"region_name":
"EXAMPLE_region_name",
"secondary_house_alpha":
"EXAMPLE_secondary_house_alpha",
"secondary_house_no":
"EXAMPLE_secondary_house_no",
"street_name":
"EXAMPLE_street_name",
"sub_building_description":
"EXAMPLE_sub_building_description",
"sub_building_no":
"EXAMPLE_sub_building_no",
"town":
"EXAMPLE_town",
"trail_info":
"EXAMPLE_trail_info"
},
"charge":
[
{
"charge_date":
"EXAMPLE_charge_date"
}
],
"date":
"EXAMPLE_date",
"proprietors":
[
{
"addresses":
[
{
"address_string":
"EXAMPLE_address_string",
"address_type":
"EXAMPLE_address_type",
"auto_uppercase_override":
"EXAMPLE_auto_uppercase_override",
"care_of":
"EXAMPLE_care_of",
"care_of_name":
"EXAMPLE_care_of_name",
"country":
"EXAMPLE_country",
"dx_no":
"EXAMPLE_dx_no",
"email_address":
"EXAMPLE_email_address",
"exchange_name":
"EXAMPLE_exchange_name",
"house_alpha":
"EXAMPLE_house_alpha",
"house_description":
"EXAMPLE_house_description",
"house_no":
"EXAMPLE_house_no",
"leading_info":
"EXAMPLE_leading_info",
"local_name":
"EXAMPLE_local_name",
"plot_code":
"EXAMPLE_plot_code",
"plot_no":
"EXAMPLE_plot_no",
"postal_county":
"EXAMPLE_postal_county",
"postcode":
"EXAMPLE_postcode",
"region_name":
"EXAMPLE_region_name",
"secondary_house_alpha":
"EXAMPLE_secondary_house_alpha",
"secondary_house_no":
"EXAMPLE_secondary_house_no",
"street_name":
"EXAMPLE_street_name",
"sub_building_description":
"EXAMPLE_sub_building_description",
"sub_building_no":
"EXAMPLE_sub_building_no",
"town":
"EXAMPLE_town",
"trail_info":
"EXAMPLE_trail_info"
}
],
"name":
{
"alias_names":
[
{
"decoration":
"EXAMPLE_decoration",
"forename":
"EXAMPLE_forename",
"surname":
"EXAMPLE_surname",
"title":
"EXAMPLE_title",
"upper_override":
"EXAMPLE_upper_override"
}
],
"auto_uppercase_override":
"EXAMPLE_auto_uppercase_override",
"charity_name":
"EXAMPLE_charity_name",
"company_location":
"EXAMPLE_company_location",
"company_reg_num":
"EXAMPLE_company_reg_num",
"country_incorporation":
"EXAMPLE_country_incorporation",
"decoration":
"EXAMPLE_decoration",
"forename":
"EXAMPLE_forename",
"local_authority_area":
"EXAMPLE_local_authority_area",
"name_category":
"EXAMPLE_name_category",
"name_information":
"EXAMPLE_name_information",
"name_occupation":
"EXAMPLE_name_occupation",
"name_supplimentary":
"EXAMPLE_name_supplimentary",
"non_private_individual_name":
"EXAMPLE_non_private_individual_name",
"surname":
"EXAMPLE_surname",
"title":
"EXAMPLE_title",
"trading_name":
"EXAMPLE_trading_name",
"trust_format":
"EXAMPLE_trust_format"
},
"trustee":
"EXAMPLE_trustee",
"type":
"EXAMPLE_type"
}
],
"text":
"EXAMPLE_text",
"type":
"EXAMPLE_type"
}
],
"language":
"EXAMPLE_language",
"notes":
[
{
"font":
"EXAMPLE_font",
"text":
"EXAMPLE_text"
}
],
"role_code":
"EXAMPLE_role_code",
"schedule":
{
"fields":
[
{
"header":
"EXAMPLE_header",
"parties":
[
{
"names":
[
{
"alias_names":
[
{
"decoration":
"EXAMPLE_decoration",
"forename":
"EXAMPLE_forename",
"surname":
"EXAMPLE_surname",
"title":
"EXAMPLE_title",
"upper_override":
"EXAMPLE_upper_override"
}
],
"auto_uppercase_override":
"EXAMPLE_auto_uppercase_override",
"charity_name":
"EXAMPLE_charity_name",
"company_location":
"EXAMPLE_company_location",
"company_reg_num":
"EXAMPLE_company_reg_num",
"country_incorporation":
"EXAMPLE_country_incorporation",
"decoration":
"EXAMPLE_decoration",
"forename":
"EXAMPLE_forename",
"local_authority_area":
"EXAMPLE_local_authority_area",
"name_category":
"EXAMPLE_name_category",
"name_information":
"EXAMPLE_name_information",
"name_occupation":
"EXAMPLE_name_occupation",
"name_supplimentary":
"EXAMPLE_name_supplimentary",
"non_private_individual_name":
"EXAMPLE_non_private_individual_name",
"surname":
"EXAMPLE_surname",
"title":
"EXAMPLE_title",
"trading_name":
"EXAMPLE_trading_name",
"trust_format":
"EXAMPLE_trust_format"
}
],
"party_role_description":
"EXAMPLE_party_role_description"
}
],
"text":
"EXAMPLE_text"
}
],
"header":
"EXAMPLE_header",
"parent_register":
"EXAMPLE_parent_register",
"schedule_type":
"EXAMPLE_schedule_type"
},
"status":
"EXAMPLE_status",
"sub_register":
"EXAMPLE_sub_register",
"template_text":
"EXAMPLE_template_text"
}
],
"filed_plan_format":
"EXAMPLE_filed_plan_format",
"last_app_timestamp":
"EXAMPLE_last_app_timestamp",
"migration_errors":
[
{
"entry_id":
"EXAMPLE_entry_id",
"extractor":
"EXAMPLE_extractor",
"message":
"EXAMPLE_message",
"message_number":
"EXAMPLE_message_number"
}
],
"raster_plan_quality":
"EXAMPLE_raster_plan_quality",
"tenure":
"EXAMPLE_tenure",
"title_number":
"EXAMPLE_title_number",
"uprns":
[
"EXAMPLE_uprn"
]
},
"geometry_data":
{
"extent":
{
"crs":
{
"properties":
{
"name":
"urn:ogc:def:crs:EPSG::27700"
},
"type":
"name"
},
"geometry":
{
"coordinates":
[
0,
0
],
"type":
"Point"
},
"properties":
{},
"type":
"Feature"
},
"index":
{
"crs":
{
"properties":
{
"name":
"urn:ogc:def:crs:EPSG::27700"
},
"type":
"name"
},
"geometry":
{
"coordinates":
[
0,
0
],
"type":
"Point"
},
"properties":
{},
"type":
"Feature"
},
"map":
{
"crs":
{
"properties":
{
"name":
"urn:ogc:def:crs:EPSG::27700"
},
"type":
"name"
},
"geometry":
{
"coordinates":
[
0,
0
],
"type":
"Point"
},
"properties":
{},
"type":
"Feature"
},
"references":
[
{
"crs":
{
"properties":
{
"name":
"urn:ogc:def:crs:EPSG::27700"
},
"type":
"name"
},
"geometry":
{
"coordinates":
[
0,
0
],
"type":
"Point"
},
"properties":
{},
"type":
"Feature"
}
]
},
"title_number":
"DN1000    "
}'''
)


class ViewTitleTestCase(unittest.TestCase):

    def setUp(self):
        self.app = app.test_client()

    @mock.patch('requests.get', return_value=fake_title)
    def test_get_title_page(self, mock_get):
        response = self.app.get('/titles/titleref')
        assert response.status_code == 200

    @mock.patch('requests.get', return_value=fake_title)
    def test_date_formatting_on_title_page(self, mock_get):
        response = self.app.get('/titles/titleref')
        self.assertTrue(str('22 May 2014 at 15:39:52') in str(response.data))
